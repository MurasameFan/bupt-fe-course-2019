{"version":3,"sources":["BgMove.ts"],"names":[],"mappings":";;;;AAAA,oBAAoB;AACpB,kFAAkF;AAClF,yFAAyF;AACzF,mBAAmB;AACnB,4FAA4F;AAC5F,mGAAmG;AACnG,8BAA8B;AAC9B,4FAA4F;AAC5F,mGAAmG;;AAE7F,IAAA,kBAAqC,EAAnC,oBAAO,EAAE,sBAAQ,CAAmB;AAI5C,aAAa;AACA,QAAA,KAAK,GAAG;IACjB,CAAC,EAAE,GAAG;IACN,CAAC,EAAE,GAAG;IACN,CAAC,EAAE,GAAG;CACT,CAAC;AAaF;IAAoC,0BAAY;IADhD;QAAA,qEA4IC;QAvIG,UAAI,GAAY,IAAI,CAAC;QASrB,eAAe;QACf,YAAM,GAAc,EAAE,CAAC;;IA6H3B,CAAC;IA3HG,uBAAM,GAAN;QACI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAEpD,UAAU;QACV,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC;IAED,wBAAO,GAAP,UAAQ,KAAa;QACjB,aAAa;QACb,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,EAAE;YAClB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,WAAW;IACX,uBAAM,GAAN,UAAO,KAAa;QAChB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,EAAE;YAClB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC;QAClB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAED,gCAAgC;IAChC,6BAAY,GAAZ;QACI,gBAAgB;QAChB,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC;QACvD,uCAAuC;QACvC,oBAAoB;QACpB,IAAI,SAAS,IAAI,CAAC,EAAE;YAChB,UAAU;YACV,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;YAC9B,UAAU;YACV,IAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACvC,WAAW;YACX,UAAU,CAAC,kBAAkB,EAAE,CAAC;YAChC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7B,IAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClC,OAAO;YACP,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC;YAChD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;SAC5B;IACL,CAAC;IAED,QAAQ;IACR,wBAAO,GAAP,UAAQ,EAAW;QAAnB,iBA+BC;QA9BG,IAAI,aAAa,GAAwB,EAAE,CAAC;QAC5C,UAAU;QACV,IAAM,OAAO,GAAG,EAAE,CAAC,KAAK,CAAC;QACzB,sBAAsB;QACtB,IAAM,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/C,IAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC;QAC/B,0BAA0B;QAC1B,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,UAAU,CAAC,CAAC;QAC/C,UAAU;QACV,MAAM,CAAC,IAAI,CAAC,aAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;YAC1B,IAAM,GAAG,GAAG,KAAI,CAAC,iBAAiB,CAC9B,KAAK,GAAG,CAAC,EACT,CAAC,EACD,aAAK,CAAC,GAAG,CAAC,EACV,UAAU,CACb,CAAC;YACF,aAAa,CAAC,IAAI,OAAlB,aAAa,EAAS,GAAG,EAAE;QAC/B,CAAC,CAAC,CAAC;QAEH,aAAa,CAAC,OAAO,CAAC,UAAC,IAAuB;YAC1C,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;gBACvB,IAAM,OAAK,GAAG,EAAE,CAAC,WAAW,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;gBAC/C,EAAE,CAAC,QAAQ,CAAC,OAAK,CAAC,CAAC;gBACnB,OAAK,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACpC;iBAAM,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;gBAC9B,IAAM,OAAK,GAAG,EAAE,CAAC,WAAW,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;gBAC/C,EAAE,CAAC,QAAQ,CAAC,OAAK,CAAC,CAAC;gBACnB,OAAK,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACpC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,SAAS;IACT,kCAAiB,GAAjB;IACI,aAAa;IACb,KAAa;IACb,UAAU;IACV,MAAc;IACd,OAAO;IACP,CAAS;IACT,UAAU;IACV,UAAkB;QAElB,YAAY;QACZ,IAAI,gBAAgB,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC;YAC5D,YAAY;YACZ,OAAA,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;QAAlC,CAAkC,CACrC,CAAC;QACF,IAAM,aAAa,GAAwB,EAAE,CAAC;QAE9C,gBAAgB,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;QAC/B,gBAAgB,GAAG,gBAAgB,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,GAAG;YAC9C,IAAI,IAAI,KAAK,KAAK,IAAI,gBAAgB,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,KAAK,EAAE;gBACvD,OAAO,IAAI,CAAC;aACf;YACD,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;QACH,gBAAgB;QAChB,gBAAgB,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK;YACjC,IAAI,IAAI,KAAK,IAAI,EAAE;gBACf,IAAM,IAAI,GAAG;oBACT,QAAQ,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,GAAG,UAAU,GAAG,KAAK,EAAE,CAAC,CAAC;oBACrD,IAAI,EAAE,OAAO;iBAChB,CAAC;gBACF,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC5B;iBAAM;gBACH,IAAM,IAAI,GAAG;oBACT,QAAQ,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,GAAG,UAAU,GAAG,KAAK,EAAE,CAAC,CAAC;oBACrD,IAAI,EAAE,OAAO;iBAChB,CAAC;gBACF,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC5B;QACL,CAAC,CAAC,CAAC;QACH,OAAO,aAAa,CAAC;IACzB,CAAC;IAtID;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;wCACG;IAIrB;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;+CACG;IAGvB;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;+CACG;IAXN,MAAM;QAD1B,OAAO;OACa,MAAM,CA2I1B;IAAD,aAAC;CA3ID,AA2IC,CA3ImC,EAAE,CAAC,SAAS,GA2I/C;kBA3IoB,MAAM","file":"","sourceRoot":"../../../../../assets/Script/view","sourcesContent":["// Learn TypeScript:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n\nimport { GameAction } from '../controller/Game';\n\n// 每一层平台的 y 值\nexport const level = {\n    1: 250,\n    2: 420,\n    3: 590,\n};\n\ntype locationArrayItem = {\n    position: cc.Vec2;\n    type: string;\n};\n\nexport type BgMoveAction = {\n    bgMove(speed: number): void;\n    bgMoveY(speed: number): void;\n};\n\n@ccclass\nexport default class BgMove extends cc.Component {\n    GameComponent: GameAction;\n\n    @property(cc.Node)\n    game: cc.Node = null;\n\n    // 预设地图资源\n    @property(cc.Prefab)\n    boardPrefab: cc.Prefab;\n\n    @property(cc.Prefab)\n    blankPrefab: cc.Prefab;\n\n    // 作为\b两张背景图存储数组\n    bgList: cc.Node[] = [];\n\n    onLoad() {\n        this.GameComponent = this.game.getComponent('Game');\n\n        // 初始化背景位置\n        this.bgList = [this.node.children[0], this.node.children[1]];\n        this.bgList[1].setPosition(this.node.width, 0);\n        this.initMap(this.bgList[0]);\n        this.initMap(this.bgList[1]);\n    }\n\n    bgMoveY(speed: number) {\n        // 上下移动不用检查拼接\n        this.bgList.forEach(bg => {\n            bg.y -= speed;\n        });\n    }\n\n    // 背景两张图片移动\n    bgMove(speed: number) {\n        this.bgList.forEach(bg => {\n            bg.x -= speed;\n        });\n        this.checkBgReset();\n    }\n\n    // 检查第一张图是否超出容器，若超出，将第一张图放到第二张图后\n    checkBgReset() {\n        // 获取第一张背景图的最右位置\n        const firstXMax = this.bgList[0].getBoundingBox().xMax;\n        // 如果第一张背景图完全移动到屏幕之外，将第一张背景图移到第二张背景图的后面\n        // 第一张背景图和第二张背景图交换位置\n        if (firstXMax <= 0) {\n            // 过一张图加一分\n            this.GameComponent.addScore();\n            // 第一张图出队列\n            const preFirstBg = this.bgList.shift();\n            // 消除背景图上障碍\n            preFirstBg.destroyAllChildren();\n            this.bgList.push(preFirstBg);\n            const curFirstBg = this.bgList[0];\n            // 重置位置\n            preFirstBg.x = curFirstBg.getBoundingBox().xMax;\n            this.initMap(preFirstBg);\n        }\n    }\n\n    // 初始化地图\n    initMap(bg: cc.Node) {\n        let locationArray: locationArrayItem[] = [];\n        // 获取背景的宽度\n        const bgWidth = bg.width;\n        // 创建一个不显示的石台实例，获取它的宽度\n        const board = cc.instantiate(this.boardPrefab);\n        const boardWidth = board.width;\n        // \b获取最多可以填充平台数量，数量不能超过这个值\n        const index = Math.floor(bgWidth / boardWidth);\n        // 随机一个地图块\n        Object.keys(level).forEach(key => {\n            const arr = this.initLocationArray(\n                index - 1,\n                0,\n                level[key],\n                boardWidth,\n            );\n            locationArray.push(...arr);\n        });\n\n        locationArray.forEach((item: locationArrayItem) => {\n            if (item.type === 'board') {\n                const board = cc.instantiate(this.boardPrefab);\n                bg.addChild(board);\n                board.setPosition(item.position);\n            } else if (item.type === 'blank') {\n                const board = cc.instantiate(this.blankPrefab);\n                bg.addChild(board);\n                board.setPosition(item.position);\n            }\n        });\n    }\n\n    // 随机生成石台\n    initLocationArray(\n        // 一层容纳的最大数量;\n        index: number,\n        // 初始化的x值;\n        xBegin: number,\n        // y的位置\n        y: number,\n        // 一个石台的位置\n        boardWidth: number,\n    ) {\n        // 30%的几率生成空\n        let perLocationArray = Array.apply(null, { length: index }).map(() =>\n            // 80%概率生成平台\n            Math.random() < 0.7 ? true : false,\n        );\n        const locationArray: locationArrayItem[] = [];\n\n        perLocationArray[index] = true;\n        perLocationArray = perLocationArray.map((item, idx) => {\n            if (item === false && perLocationArray[idx + 1] === false) {\n                return true;\n            }\n            return item;\n        });\n        // 根据初始化数组 初始化坐标\n        perLocationArray.forEach((item, index) => {\n            if (item === true) {\n                const data = {\n                    position: new cc.Vec2(xBegin + boardWidth * index, y),\n                    type: 'board',\n                };\n                locationArray.push(data);\n            } else {\n                const data = {\n                    position: new cc.Vec2(xBegin + boardWidth * index, y),\n                    type: 'blank',\n                };\n                locationArray.push(data);\n            }\n        });\n        return locationArray;\n    }\n}\n"]}